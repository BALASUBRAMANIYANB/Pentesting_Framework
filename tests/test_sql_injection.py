# tests/test_sql_injection.py

import unittest
from modules.sql_injection import SQLInjectionTester
from unittest.mock import patch

class TestSQLInjectionTester(unittest.TestCase):
    @patch('modules.sql_injection.make_request')
    def test_sql_injection(self, mock_make_request):
        # Mocking the response to simulate SQL injection vulnerability detection
        mock_make_request.return_value.text = "SQL syntax error"
        
        tester = SQLInjectionTester("http://example.com", "id")
        result = tester.test_sql_injection()
        
        # Since we are not returning anything from the method, we check for a print or call
        mock_make_request.assert_called()
        self.assertIn("' OR '1'='1", mock_make_request.call_args[1]['params']['id'])

if __name__ == '__main__':
    unittest.main()
